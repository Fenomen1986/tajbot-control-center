import json
import telebot
from telebot import types
from django.http import HttpResponse, HttpResponseForbidden
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from .models import Bot, Lead

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(settings.TELEGRAM_BOT_TOKEN, threaded=False)
user_data = {}

# --- –¢–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö (–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
texts = {
    'ru': {
        'welcome': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è.",
        'menu_prompt': "–Ø –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        'menu_what_bots_can_do': "–£–∑–Ω–∞—Ç—å, —á—Ç–æ —É–º–µ—é—Ç —á–∞—Ç-–±–æ—Ç—ã",
        'menu_see_example': "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã",
        'menu_discuss_project': "–û–±—Å—É–¥–∏—Ç—å –º–æ–π –ø—Ä–æ–µ–∫—Ç",
        'menu_prices': "–£–∑–Ω–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã",
        'reply_what_bots_can_do': (
            "–ù–∞—à–∏ —á–∞—Ç-–±–æ—Ç—ã ‚Äî —ç—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç:\n\n"
            "‚úÖ *–ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã:* –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –∫–∞—Ñ–µ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n"
            "‚úÖ *–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ª—É–≥–∏:* –¥–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã, –∫–ª–∏–Ω–∏–∫, –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤.\n"
            "‚úÖ *–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å:* –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ 90% —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ü–µ–Ω–∞—Ö, –∞–¥—Ä–µ—Å–µ, —É—Å–ª—É–≥–∞—Ö.\n"
            "‚úÖ *–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏:* –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ CRM-—Å–∏—Å—Ç–µ–º–µ."
        ),
        'reply_see_example': (
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í–º–µ—Å—Ç–æ —Ç—ã—Å—è—á–∏ —Å–ª–æ–≤ ‚Äî –æ–¥–∏–Ω –Ω–∞–≥–ª—è–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä.\n\n"
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:\n"
            "1Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç –≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫–∏: '–ú–µ–Ω—é', '–ó–∞–∫–∞–∑', '–ë—Ä–æ–Ω—å'.\n"
            "2Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ—Ç '–ú–µ–Ω—é', –≤–∏–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '–°–∞–ª–∞—Ç—ã', '–ì–æ—Ä—è—á–µ–µ'.\n"
            "3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç –±–ª—é–¥–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
            "4Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ—Ç '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', –ø–∏—à–µ—Ç –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
            "–í—Å—ë! –ó–∞–∫–∞–∑ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –≤–∞—à–µ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ü—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ 24/7."
        ),
        'reply_prices': (
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á. –í–æ—Ç –Ω–∞—à–∏ –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã:\n\n"
            "üîπ *'–°—Ç–∞—Ä—Ç' (450 - 2000 —Å–æ–º–æ–Ω–∏):* –ë–æ—Ç-–≤–∏–∑–∏—Ç–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ).\n\n"
            "üîπ *'–ë–∏–∑–Ω–µ—Å' (2000 - 4000 —Å–æ–º–æ–Ω–∏):* –ë–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø—Ä–∏–µ–º–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n"
            "üîπ *'–ü—Ä–æ—Ñ–∏' (–æ—Ç 4000 —Å–æ–º–æ–Ω–∏):* –°–ª–æ–∂–Ω—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å –≤–∞—à–µ–π CRM-—Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."
        ),
        'ask_name': "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        'ask_business': "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {}!\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–∞—Ñ–µ', '–º–∞–≥–∞–∑–∏–Ω').",
        'ask_task': "–°–ø–∞—Å–∏–±–æ! –ö–∞–∫—É—é –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—Ä—É—á–∏—Ç—å –±–æ—Ç—É?",
        'final_thanks': "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ù–∞—à —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        'error_message': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    },
    'tj': {
        'welcome': "–ê—Å—Å–∞–ª–æ–º—É –∞–ª–µ–π–∫—É–º!\n–ë–∞—Ä–æ–∏ –∏–¥–æ–º–∞, –ª—É—Ç—Ñ–∞–Ω –∑–∞–±–æ–Ω–∏ –º—É–æ—à–∏—Ä–∞—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.",
        'menu_prompt': "–ú–∞–Ω —ë—Ä–¥–∞–º—á–∏–∏ —Ä–∞“õ–∞–º–∏–∏ —à—É–º–æ. –ß”£ —Ö–∏–∑–º–∞—Ç –∫–∞—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–º?",
        'menu_what_bots_can_do': "–ß–∞—Ç-–±–æ—Ç“≥–æ —á”£ –∫–æ—Ä –∫–∞—Ä–¥–∞ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥",
        'menu_see_example': "–ù–∞–º—É–Ω–∞–∏ –∫–æ—Ä—Ä–æ –¥–∏–¥–∞–Ω",
        'menu_discuss_project': "–õ–æ–∏“≥–∞–∏ —Ö—É–¥—Ä–æ –º—É“≥–æ–∫–∏–º–∞ –∫–∞—Ä–¥–∞–Ω",
        'menu_prices': "–ù–∞—Ä—Ö“≥–æ–∏ —Ç–∞—Ö–º–∏–Ω–∏—Ä–æ —Ñ–∞“≥–º–∏–¥–∞–Ω",
        'reply_what_bots_can_do': "...",
        'reply_see_example': "...",
        'reply_prices': "...",
        'ask_name': "–û–ª”£! –ë–∞ —à—É–º–æ —á”£ —Ç–∞–≤—Ä –º—É—Ä–æ“∑–∏–∞—Ç –∫—É–Ω–∞–º?",
        'ask_business': "–ê–∑ —à–∏–Ω–æ—Å–æ”£ –±–æ —à—É–º–æ —à–æ–¥–∞–º, {}!\n–î–∞—Ä –±–æ—Ä–∞–∏ —Ç–∏“∑–æ—Ä–∞—Ç–∏ —Ö—É–¥ –º—É—Ö—Ç–∞—Å–∞—Ä –Ω–∞“õ–ª –∫—É–Ω–µ–¥.",
        'ask_task': "–¢–∞—à–∞–∫–∫—É—Ä! –ö–∞–¥–æ–º –≤–∞–∑–∏—Ñ–∞–∏ –∞—Å–æ—Å–∏—Ä–æ –±–∞ –±–æ—Ç —Å—É–ø–æ—Ä–∏–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
        'final_thanks': "–ë–µ“≥—Ç–∞—Ä–∏–Ω! –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ “∑–∞–≤–æ–±“≥–æ. –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Å–∞–±—Ç —à—É–¥. –†–æ“≥–±–∞—Ä–∏ –º–æ –±–∞ –∑—É–¥”£ –±–æ —à—É–º–æ –¥–∞—Ä —Ç–∞–º–æ—Å —Ö–æ“≥–∞–¥ —à—É–¥.",
        'error_message': "–•–∞—Ç–æ–≥–∏–∏ —Å–∏—Å—Ç–µ–º–∞–≤”£ —Ä—É—Ö –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω, –¥–µ—Ä—Ç–∞—Ä –∫”Ø—à–∏—à –∫—É–Ω–µ–¥."
    }
}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    user_data[user_id] = {}
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_tj = types.InlineKeyboardButton("–¢–æ“∑–∏–∫”£", callback_data='lang_tj')
    btn_ru = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru')
    markup.add(btn_tj, btn_ru)
    welcome_text = f"{texts['tj']['welcome']}\n\n{texts['ru']['welcome']}"
    bot.send_message(user_id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def handle_language_selection(call):
    user_id = call.message.chat.id
    lang = call.data.split('_')[1]
    user_data[user_id] = {'lang': lang}
    bot.answer_callback_query(call.id)
    bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(
        types.KeyboardButton(texts[lang]['menu_what_bots_can_do']),
        types.KeyboardButton(texts[lang]['menu_see_example']),
        types.KeyboardButton(texts[lang]['menu_prices']),
        types.KeyboardButton(texts[lang]['menu_discuss_project'])
    )
    bot.send_message(user_id, texts[lang]['menu_prompt'], reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.chat.id
    text = message.text
    if user_id not in user_data or 'lang' not in user_data[user_id]:
        send_welcome(message)
        return
    lang = user_data[user_id]['lang']
    if text == texts[lang]['menu_what_bots_can_do']:
        bot.send_message(user_id, texts[lang]['reply_what_bots_can_do'], parse_mode="Markdown")
    elif text == texts[lang]['menu_see_example']:
        bot.send_message(user_id, texts[lang]['reply_see_example'], parse_mode="Markdown")
    elif text == texts[lang]['menu_prices']:
        bot.send_message(user_id, texts[lang]['reply_prices'], parse_mode="Markdown")
    elif text == texts[lang]['menu_discuss_project']:
        msg = bot.send_message(user_id, texts[lang]['ask_name'], reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    user_id = message.chat.id
    user_data[user_id]['name'] = message.text
    lang = user_data[user_id]['lang']
    msg = bot.send_message(user_id, texts[lang]['ask_business'].format(message.text))
    bot.register_next_step_handler(msg, process_business_step)

def process_business_step(message):
    user_id = message.chat.id
    user_data[user_id]['business'] = message.text
    lang = user_data[user_id]['lang']
    msg = bot.send_message(user_id, texts[lang]['ask_task'])
    bot.register_next_step_handler(msg, process_task_step)

def process_task_step(message):
    user_id = message.chat.id
    user_data[user_id]['task'] = message.text
    lang = user_data[user_id]['lang']
    
    # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ë–õ–û–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–î ---
    try:
        token_from_settings = settings.TELEGRAM_BOT_TOKEN
        if not token_from_settings:
            raise ValueError("TELEGRAM_BOT_TOKEN is not set in environment variables.")
        
        bot_instance = Bot.objects.get(token=token_from_settings)
        
        name = user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        business = user_data[user_id].get('business', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        task = user_data[user_id].get('task', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        full_lead_data = (f"–ë–∏–∑–Ω–µ—Å: {business}\n–ó–∞–¥–∞—á–∞: {task}\n–Ø–∑—ã–∫: {'–†—É—Å—Å–∫–∏–π' if lang == 'ru' else '–¢–æ“∑–∏–∫”£'}")
        
        Lead.objects.create(
            bot=bot_instance,
            customer_name=name,
            customer_data=full_lead_data,
            status='–ù–æ–≤–∞—è'
        )
        bot.send_message(user_id, texts[lang]['final_thanks'])
        print(f"‚úÖ New lead from '{name}' saved to DB.")

    except Bot.DoesNotExist:
        error_message = f"üõë CRITICAL ERROR: A bot with the token '{settings.TELEGRAM_BOT_TOKEN[:15]}...' is NOT registered in the admin panel!"
        print(error_message)
        bot.send_message(user_id, texts[lang]['error_message'])
    except Exception as e:
        error_message = f"üõë CRITICAL ERROR during lead saving: {e}"
        print(error_message)
        bot.send_message(user_id, texts[lang]['error_message'])
    
    del user_data[user_id]


@csrf_exempt
def telegram_webhook(request):
    if request.headers.get('content-type') == 'application/json':
        json_string = request.body.decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return HttpResponse('OK', status=200)
    else:
        return HttpResponseForbidden('Forbidden')